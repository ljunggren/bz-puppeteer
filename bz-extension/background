let _appUrl="https:/"+"/ai.boozang.com",_masterTabId,_masterFrameId,_masterUrl,_ctrlTabId,_ctrlWindowId,curElement,_frameIds={},_plugInCode,_bzEnvCode,_css,_status=_newStatus=0,_lastExeActionReq,_doingPopCtrl,_curTest,_data,_curAction,_shareData={},_ctrlFrameId;
let _lastErrPage=0,_loadPageInfo,assignfirmeCall,ignoreReqs="",_topFrameId=0,_uncodeFrames=[];
let _ignoreList=["https://vars.hotjar.com"],_lastIframeRequest=0,_dblCheckTime=0,extendTopScript="",extendEndScript="";
let bzClient;
let funMap={
  cleanMaster:function(){
    cleanMaster()
  },
  // storeEventGroupData:function(bkScope,bkFun,data){
    // for(var k in data){
      // _lastExeActionReq[k]=data[k]
    // }
  // },
  getExtensions:function(bkScope,bkFun,v,_callback){
    // let blockExtensions={
      // "kbfnbcaeplbcioakkpcpgfkobkghlhen":"Grammarly"
    // }
    //try to find extension: Grammarly, it cause performance issue!
    chrome.management.getAll(vs=>{
      _callback(vs.filter(x=>{
        return x.enabled
      }))
    })
  },
  loadImg:function(s,f,v,t,e,bkFun){
    let img=document.createElement("img")
//    document.body.append(img)
    img.src=v

    let c=document.createElement("canvas")
//    document.body.append(c)
    c.width=img.width
    c.height=img.height
    let cc=c.getContext("2d")
    cc.drawImage(img,0,0)

    img.onload=function(x){
      x=c.toDataURL()
      console.log(x)
      bkFun(x)
//      chrome.tabs.sendMessage(t.id, {scope:s,fun:f,data:{url:c.toDataURL()}});
      c.remove()
      img.remove()
    }
  },
  setValidJsonData:function(scope,bkFun,data){
    validateJsonData=data
    window.open(data.url+"/showValid","bz-master");
  },
  getValidJsonData:function(scope,bkFun,data){
    chrome.tabs.sendMessage(_masterTabId, {tab:"master",scope:"$util",fun:"showJsonValidateResult",data:validateJsonData});
  },
  openWindow:function(s,f,d,c){
    if(d.name=="bz-client"){
      bzClient=window.open(d.url,d.name,d.size);
      bzClient.focus()
      // setTimeout(()=>{
      //   bzClient=window.open(d.url,d.name,d.size);
      //   bzClient.focus()
      // },1)
    }else{
      window.open(d.url,d.name,d.size);
    }
    c&&c({})
  },
  focusTW:function(){
    if(bzClient&&!bzClient.closed){
      bzClient.focus()
    }
  },
  closeTW:function(){
    try{
      bzClient&&!bzClient.closed&&bzClient.close()
    }catch(e){
      debugger
    }
  },
  blurTW:function(){
    bzClient.blur()
  },
  isRequestCompleted:function(bkScope,bkFun,_rList){
    _rList.forEach((r,i)=>{
      var v=_responseList[r]
      if(v){
        delete _responseList[r]
        _rList[i]=funMap.buildRequestData(v)
      }else{
        _rList[i]=null
      }
    })
    chrome.tabs.sendMessage(_masterTabId, {tab:"master",scope:bkScope,fun:bkFun,data:{result:!Object.keys(_list).length,data:_rList}});
  },
  postRequest:function(v,scope,fun){
    if(["main_frame","xmlhttprequest"].includes(v.type)){
      v=funMap.buildRequestData(v)
      var id=v.requestId
      if(fun=="addReq"){
        _list[id]=v
      }else{
        delete _list[id]
        _responseList[id]=v
      }
      chrome.tabs.sendMessage(_masterTabId, {tab:"master",scope:scope,fun:fun,data:v});
    }
  },
  buildRequestData:function(v){
    return {
      requestId:v.requestId,
      url:v.url,
      timeStamp:v.timeStamp,
      statusCode:v.statusCode,
      type:v.type,
      method:v.method
    }
  },
  enableAllIframe:function(){
    _initFrame(0)
    _uncodeFrames.forEach(f=>{_initFrame(f)})
  },
  ajax:function(scope,fun,data,_callback,element,responseFun){
    var xhttp = new XMLHttpRequest();
    let asFile=data.notDownloadAsFile
    delete data.notDownloadAsFile
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4) {
        if(data.responseType=="arraybuffer"&&!asFile){
          let o=_handleBold(this.response,data.url)
          if(_callback&&_callback.constructor==Function){
            _callback(o)
          }else if(responseFun){
            responseFun(o)
          }
        }else{
          let hs={}
          this.getAllResponseHeaders().split("\n").forEach(x=>{
            if(x){
              let k=x.indexOf(":")
              let v=x.substring(k+1)
              hs[x.substring(0,k).trim()]=v.trim()
            }
          })
          
          var d={
            tab:"master",
            scope:scope,
            fun:fun,
            data:{status:this.status,data:this.response,headers:hs},
            
          }
          if(data.responseType&&this.response){
            d.data.data=String.fromCharCode.apply(null, new Uint8Array(this.response));
          }
          if(_callback&&_callback.constructor==Function){
            _callback(d.data)
          }else if(responseFun){
            responseFun(d.data)
          }
        }
      }
    };
    xhttp.open(data.method, data.url, true);
    for(var k in data.headers){
      xhttp.setRequestHeader(k,data.headers[k])
    }
    if(data.responseType){
      xhttp.responseType = data.responseType;
    }
    if(data.contentType){
      xhttp.setRequestHeader("Content-Type",data.contentType)
    }
    xhttp.setRequestHeader('Cache-Control', 'no-cache, no-store, max-age=0');
    xhttp.send(data.data);

    function _handleBold(blob,_url){
      var str=_handleCodePoints(new Uint8Array(blob));
      
      //var str = String.fromCharCode.apply(null, new Uint8Array(blob));
      //var str=new TextDecoder("utf-8").decode(new Uint8Array(blob));
      var v=_url.split("/");
      var n=v.pop()||v.pop()

      var t=n.split(".").pop()||"";
      if(["jpg","png","svg","bmp","gif","jpeg","ico"].includes(t)){
        t="image/"+t;
      }else if("txt"==t){
        t="plant/text"
      }else{
        t="application/"+t;
      }
      return [{
        size:str.length,
        name:n,
        base64Link:"data:"+t+";base64,"+_b64EncodeUnicode(str),
        lastModified:Date.now(),
        lastModifiedDate:new Date(),
        webkitRelativePath:"",
        type:t
      }];
    }
    function _handleCodePoints(array) {
      var CHUNK_SIZE = 0x8000; // arbitrary number here, not too small, not too big
      var index = 0;
      var length = array.length;
      var result = '';
      var slice;
      while (index < length) {
        slice = array.slice(index, Math.min(index + CHUNK_SIZE, length)); // `Math.min` is not really necessary here I think
        result += String.fromCharCode.apply(null, slice);
        index += CHUNK_SIZE;
      }
      return result;
    }

    function _b64EncodeUnicode(str) {
      try{
        return btoa(str)
      }catch(e){
        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
            function toSolidBytes(match, p1) {
                return String.fromCharCode('0x' + p1);
        }));
      }
    }
  },
  getScreenshot:function(bkScope,bkFun,d,t,element){
    let offset={
      left:0,
      top:0
    }
    chrome.tabs.captureVisibleTab((t&&t.tab.windowId)||_ctrlWindowId,(img) => {
      let vs=getIframePath(element||curElement)||[]
      findOffset(vs,img)
    })
    
    function findOffset(vs,img){
      if(vs.length){
        chrome.tabs.sendMessage(_ctrlTabId,{bz:1,findOffset:vs},function(r){
          offset.left+=r.left;
          offset.top+=r.top
          vs.pop()
          findOffset(vs,img)
        });
      }else{
        chrome.tabs.sendMessage((t&&t.tab.id)||_masterTabId, {
          tab:(t&&t.tab.id)||"master",
          scope:bkScope,
          fun:bkFun,
          data:{imgUrl:img,offset:offset}
        });
      }
    }
  }
}
let _list={},_responseList={}

chrome.browserAction.setBadgeText({text: chrome.runtime.getManifest().version=="1.2"?"TEST":"AI"});
//open management page from extension icon!
// chrome.browserAction.onClicked.addListener(function() {
  // chrome.tabs.create({url: _appUrl}, function(tab) {});
// });


/*Get Message from IDE*/
chrome.runtime.onMessageExternal.addListener(function(_req, _sender, _callback) {
  //_console("background (web page): ",_req)
  //check whether the request from BZ pages. If not from BZ do nothing.
  if(!_req.bz){
    return;
  }
  //check whether the request from BZ client web page
  if(_req.bg){
    if(_req.bgScript){
      return eval(_req.bgScript)
    }
      
    return funMap[_req.fun](_req.bkScope,_req.bkFun,_req.data,_callback)
  }else if(_req.twPage){
    if(_req.tab=="master"){
//      _req.frameId=[0];
      delete _req.twPage
      _req.twPage2=1
      chrome.tabs.sendMessage(_masterTabId, _req);
    }else{
      _req.frameId=[_sender.frameId];
      chrome.tabs.sendMessage(_ctrlTabId, _req);
    }
  //Master tab send dynamic code to background to forward to content
  }else if(_req.bzExeCode){
    if(_req.element){
      let v=getIframePath(_req.element)
      return chrome.tabs.sendMessage(_ctrlTabId,{bz:1,findFrameId:v,element:_req.element,retry:0},function(r){
        _setCodeToContent(_req.bzExeCode,r);
      })
    }else{
      _setCodeToContent(_req.bzExeCode,_req.id);
    }
  //Master send current status
  }else if(_req.status!==undefined){
    //master tab set status before start pop client win
    if(_req.status=="popwin-start"){
      _doingPopCtrl=1
    //master tab set status after end pop client win
    }else if(_req.status=="popwin-end"){
      _doingPopCtrl=0
    }else{
      _newStatus=_status=_req.status;
      if(_ctrlTabId){
        if(_req.data){
          _data=_req.data;
        }
        if(_newStatus=="record"){
          //funMap.enableAllIframe()
        }
        chrome.tabs.sendMessage(_ctrlTabId, {_newStatus:_newStatus,data:_req.data});
        _newStatus=0;
      }
    }
  }else if(_req.open){
    window.open(req.url,req.name,req.size);
  //Set BZ code mapping data to unecrypt code from https://ai.boozang.com
  }else if(_req.ecMap){
    ecMap=_req.ecMap;
    _callback("background get ecMap")
  }else if(_req.extendTopScript){
    extendTopScript=_req.extendTopScript
    return
  }else if(_req.extendEndScript){
    extendEndScript=_req.extendEndScript
    return
  //Dynamic code from BZ master page
  }else if(_req.bzCode){
    if(_masterTabId&&_masterTabId!=_sender.tab.id){
      chrome.tabs.sendMessage(_masterTabId, {tab:"master",scope:"window",fun:"close"});
      chrome.tabs.sendMessage(_ctrlTabId, {tab:"master",scope:"window",fun:"close"});
    }
    _shareData={}
    _masterTabId=_sender.tab.id;
    _masterFrameId=_sender.frameId
    _masterUrl=_sender.url;
    _plugInCode=_req.bzCode;
    _lastExeActionReq=0;
    ignoreReqs="";
    _callback(1)
    // _setCodeToContent("window.close();",_topFrameId);
  //Set CSS file path from BZ master page
  }else if(_req.bzCss){
    _css=_req.bzCss;
  //Dynamic data from BZ master page
  }else if(_req.bzEnvCode){
    _bzEnvCode=_req.bzEnvCode;
  //check whether BZ client tab ready
  }else{
    //for request execution a BZ testing action
    if(_req.exeAction){
      assignFrameId(_req,_req.exeAction.element)
      _lastExeActionReq=_req;
      if(_req.exeAction.element){
        return _addFrameId(_req,_req.exeAction.element,function(r){
          _doIt(r||_req)
        })
      }else if(_req.exeAction[ecMap.co]){
        //_req.exeAction.code._element
        var e=_req.exeAction[ecMap.co][ecMap.e];
        if(e){
          //_req.exeAction.code._element[0]._css
          e=e[0][ecMap.c];
          return _addFrameId(_req,e,function(r){
            _doIt(r||_req)
          })
        }
      }
    //for request highlight a BZ action element
    }else if(_req.element!==undefined){
      return _addFrameId(_req,_req.element,function(r){
        _doIt(r||_req)
      })
    }else if(_req.data&&_req.data.element){
      assignFrameId(_req,_req.data.element)
      return _addFrameId(_req,_req.data.element,function(r){
        _doIt(r||_req)
      })
    }else if(_req.curTest!==undefined){
      _curTest=_req.curTest
      if(_req.curAction!==undefined){
        _curAction=_req.curAction;
      }
    }else if(_req.shareData){
      for(var k in _req.shareData){
        _shareData[k]=_req.shareData[k];
      }
    }else if(_req.updateExpection&&_req.updateExpection.element){
      assignFrameId(_req,_req.updateExpection.element)
      return _addFrameId(_req,_req.updateExpection.element,function(r){
        _doIt(r||_req)
      })
    }
    _doIt(_req)
    function _doIt(_req){
      if(!_ctrlTabId){
        if(_req.exeAction){
          if(_ctrlTabId){
            chrome.tabs.get(_ctrlTabId,function(o){
              chrome.tabs.sendMessage(_masterTabId, {scope:"commAdapter",fun:"crash",data:_lastErrPage,twPage:1,tab:"master",bz:1});
            })
          }else{
            chrome.tabs.sendMessage(_masterTabId, {scope:"commAdapter",fun:"crash",twPage:1,tab:"master",bz:1});
          }
        }
      }else{
        chrome.tabs.sendMessage(_ctrlTabId, _req,function(v){
          _callback&&_callback(v)
        });
      }
    }
  }
});
var _appRetry=0
function _addFrameId(_req,_element,_fun,_retry){
  curElement=[_element[0]]
  if(_req.exeAction&&_lastIframeRequest&&_req!=_lastIframeRequest._req){
    _lastIframeRequest=0
    clearTimeout(_dblCheckTime)
    _dblCheckTime=0
    _retry=_appRetry+1;
  }
  _retry=_retry||0
  _appRetry=_retry
  assignFrameId(_req,_element)
  if(_element&&_element.constructor==Object){
    _element=_element.path
  }
  
  var _badRequest=0;
  if(_req.exeAction){
    _badRequest=setTimeout(function(){
      _appRetry++
      if(_appRetry*1000>(_req.exeAction.max||_req.exAction.min||2000)){
        _fun(_req)
      }else{
        _addFrameId(_req,_element,_fun,_appRetry)
      }
    },1000)
  }
  let v=getIframePath(_element)
  if(v){
    return chrome.tabs.sendMessage(_ctrlTabId,{bz:1,findFrameId:v,element:_element,retry:_appRetry},function(r){
      if(r!==undefined&&r!==null){
        clearTimeout(_badRequest)
        if(_element[0]!="BZ.TW.document"){
          if(_req.exeAction){
            if(!_lastIframeRequest){
              _lastIframeRequest={
                _element:[],
                r:r,
                _req:_req,
                _fun:_fun
              }
              _element.forEach(e=>{
                _lastIframeRequest._element.push(e)
              })
            }else{
              if(_lastIframeRequest.r==r){
                return 
              }else{
                _lastIframeRequest.r=r
              }
            }
            dblCheckForIframe()
          }
          _element[0]="BZ.TW.document";
          _req.frameId=[r];
          if(_uncodeFrames.includes(r)){
            _uncodeFrames.splice(_uncodeFrames.indexOf(r),1)
            _initFrame(r)
          }
          return _fun(_req)
        }
        console.log("error:")
        console.log(JSON.stringify(_element))
      }
    })
  }
  clearTimeout(_badRequest)
  _fun()
}

function assignFrameId(o,_element){
  if(_element && _element[0]!="BZ.TW.document"){
    o.frameId=[_topFrameId];
  }else{
    o.frameId=[0]
  }
}
function getIframePath(_element){
  if(_element&&_element[0]&&!_element[0].startsWith("$(BZ.TW.document.body)")&&_element[0][0]=="$"){
    var v=_element[0].match(/\((.+)\)/)
    if(v){
      v=v[1].trim()
      if(v.match(/^[0-9, ]+$/)){
        return v.split(",")
      }else{
        v=v.split("(")
        v=v[1]||v[0]
        v=v.replace(/(^['"]|['"]$)/g,"")
        return [v]
      }
    }
  }
}
function dblCheckForIframe(){
  console.log("dblCheckForIframe ....")
  _dblCheckTime=setTimeout(function(){
    if(_lastIframeRequest&&_dblCheckTime&&_status=="play"){
      _dblCheckTime=0
      console.log("dblCheckForIframe works ....")
      _lastIframeRequest._req.element=_lastIframeRequest._element
      _addFrameId(_lastIframeRequest._req,_lastIframeRequest._element,_lastIframeRequest._fun)
    }else{
      console.log("dblCheckForIframe doesn't work....")
    }
  },3000)
}
//to get frame ids by element path
function _getFrameIds(_root){
  
}
function _isExistTab(id,_fun){
  chrome.tabs.query({}, function(tabs) {
    for(var i=0;i<tabs.length;i++){
      if(tabs[i].windowId==id){
        return _fun()
      }
    }
  });
}
//set code to chrome extension content
function _setCodeToContent(c,id,tabId,chkFrameId){
  tabId=tabId||_ctrlTabId
  //for set dynamic code to current controled client tab, 
  if(tabId && !_lastErrPage){
    try{
      chrome.tabs.sendMessage(_masterTabId, {scope:"console",fun:"log",data:"BZ-LOG:set code to client:"+c.length,twPage:1,tab:"master",bz:1});
      if(id!==undefined){
        if(!id&&_topFrameId){
          id=_topFrameId
        }
        // chrome.tabs.sendMessage(_masterTabId, {scope:"console",fun:"log",data:"BZ-LOG:set code 1 to client:"+c.length,twPage:1,tab:"master",bz:1});
        chrome.tabs.executeScript(tabId, {code: c,matchAboutBlank:true,frameId:id},_=>{
          //let e = chrome.runtime.lastError;
          //if(e !== undefined){
            //console.log(tabId, _, e);
          //}
        });
      }else{
        chrome.tabs.executeScript(tabId, {code: c,matchAboutBlank:true,allFrames:true},_=>{
          let e = chrome.runtime.lastError;
          if(e !== undefined){
            chrome.tabs.sendMessage(_masterTabId, {scope:"console",fun:"log",data:"BZ-LOG:set code to client get error1:"+e,twPage:1,tab:"master",bz:1});
            console.log(tabId, _, e);
          }
        });
      }
    }catch(e){
      chrome.tabs.sendMessage(_masterTabId, {scope:"console",fun:"log",data:"BZ-LOG: Set code to extension failed: "+e.message+"\n"+e.stock,twPage:1,tab:"master",bz:1});
      console.log(e.stock)
      
      // chrome.tabs.sendMessage(_masterTabId, {scope:"console",fun:"log",data:"BZ-LOG:set code to client get error2:"+e.message,twPage:1,tab:"master",bz:1});
    }
  }
}
function isIgnoreFrame(v){
  for(var i=0;i<_ignoreList.length;i++){
    if(v.startsWith(_ignoreList[i])){
      return 1
    }
  }
}

let pop={
  formatLog:function(tab) {
    chrome.tabs.executeScript(tab.id, {code: `window.formatter&&window.formatter.exeFormag(${JSON.stringify(tab.data)})`,matchAboutBlank:true,allFrames:true},_=>{})
  },
  updateFormatLogSetting:function(tab){
    chrome.tabs.executeScript(tab.id, {code: `window.formatter&&window.formatter.updateFormatLogSetting(${JSON.stringify(tab.data)})`,matchAboutBlank:true,allFrames:true},_=>{})
  },
  getPageInfo:function(tab,_fun){
    chrome.tabs.sendMessage(tab, {scope:"formatter",fun:"getPageInfo"},d=>{
      _fun(d)
    });
  }
}

//get message from app extension content
chrome.runtime.onMessage.addListener(function(_msg, t, _sendResponse) {
  if(_msg.pop){
    _sendResponse("ok")
    return pop[_msg.fun](_msg.data,function(d){
      _sendResponse(d)
    })
  }else if(!_msg.requestSendResponse){
    _sendResponse("ok")
  }else{
    _msg.requestSendResponse=_sendResponse
  }
  if(_msg.keep){
    return;
  }
  //_console("background (content): ",_msg)
  /*****************************************************************************************************
  //For REGISTER tab, it only work for new pop window. The new window must pop up from master window.
  *****************************************************************************************************/
  if(_msg.bg){
    funMap[_msg.fun](_msg.bkScope,_msg.bkFun,_msg.data,t,_msg.element,_msg.requestSendResponse)
    return !!_msg.requestSendResponse
  }else if(_msg._registerTab && (_msg.name=="bz-client"||_ctrlTabId==t.tab.id)){
    if(_msg.name=="bz-client"){
      if(!_plugInCode){
        chrome.tabs.sendMessage(_masterTabId, {tab:"master",scope:"_extensionComm",fun:"_loadPlugCode"});
      }
      _ctrlTabId=t.tab.id;
      _ctrlWindowId=t.tab.windowId;
      if(_ctrlTabId==_masterTabId){
        _ctrlFrameId=t.frameId
      }
      //to tell master the current client tab id
      chrome.tabs.sendMessage(_masterTabId, {tw:_ctrlTabId,topFrame:t.frameId,tab:"master"});
    }
    // if(t.url.startsWith(_appUrl)){
    //   return alert("Testing on Boozang sites not supported!");
    // }
    if(isIgnoreFrame(t.url)){
      return
    }
    _topFrameId=_msg.name=="bz-client"||_msg.name=="bz-manager"?t.frameId:_topFrameId;
    _setCodeToContent("bzIframeId="+t.frameId+";topFrame="+(_msg.name=="bz-client"?1:0)+";",t.frameId)
/*
    if(_topFrameId!=t.frameId&&_status=="play"){
      _uncodeFrames.push(t.frameId)
      return
    }
*/
    _initFrame(t.frameId)
  //only work after master window is ready, and the requestion will send to master
  }else if(_masterTabId){
    _msg.ctrlInfo=1;
    if(_msg.result){
      _lastExeActionReq=0;
    }else if(_msg.action){
//      if(t.frameId&&_frameIds[t.frameId]){
  //      _msg.action.element[0]=_frameIds[t.frameId].path;
    //  }
    }else if(_msg[ecMap.ua]){
      //if(t.frameId&&_frameIds[t.frameId]){
        //_msg._updateAction.element[0]=_frameIds[t.frameId].path;
        //_msg[ecMap.ua].element[0]=_frameIds[t.frameId].path;
      //}
      _setCodeToContent("if(window."+ecMap.dp+"){"+ecMap.dp+"."+ecMap.er+"()}")
    }else if(_msg[ecMap.f]==ecMap.rca){
      if(t.frameId&&_frameIds[t.frameId]){
        if(_msg[ecMap.d][ecMap.a].element){
          _msg[ecMap.d][ecMap.a].element[0]=_frameIds[t.frameId].path;
        }
      }
    }else if(_msg._fun==ecMap.pe){
      if(t.frameId&&_frameIds[t.frameId]){
        _msg[ecMap.d][0]=_frameIds[t.frameId].path
      }
    }else if(_msg._fun==ecMap.lnp){
      _frameIds={}
    }else if(_msg.unloadFrame){
      delete _frameIds[_msg.id]
    }
    _msg.tab="master"
    chrome.tabs.sendMessage(_masterTabId, _msg);
  }
});
function getPlugCode(){
  return (extendTopScript||"")+"\n"+_plugInCode+"\n"+(extendEndScript||"")
}
function _initFrame(frameId){
  //Debugging flag, if the current content doesn't have dynamica code, set the master code to it.
  if(!window.BZ){
    _setCodeToContent(getPlugCode(),frameId);
  }else{
    //for BZ developer debugging in BZ office
    if(_masterUrl.includes("boozang")){
      //alert("The extension is not for production")
      if(_plugInCode){
        _setCodeToContent(getPlugCode(),frameId);
      }else{
        _setCodeToContent("showCode('BZ Debugging');",frameId);
      }
    }else{
      _setCodeToContent("showCode('BZ Debugging');",frameId);
    }
  }
  _setCodeToContent(_bzEnvCode+";window.onbeforeunload=function(){chrome.runtime.sendMessage({unloadFrame:1,id:bzIframeId})}",frameId);
  _setCodeToContent("_insertCssAndClientCode("+JSON.stringify({_css:_css,_newStatus:_newStatus||_status,_status:_status,data:_data})+")",frameId)

  if(_status!="play"){
    if(_curAction){
      chrome.tabs.sendMessage(_ctrlTabId,{curAction:_curAction});
    }else if(_curTest){
      chrome.tabs.sendMessage(_ctrlTabId,{curTest:_curTest});
    }
  }
  if(_shareData){
    chrome.tabs.sendMessage(_ctrlTabId,{shareData:_shareData});
  }

  if(_lastExeActionReq && _status=="play"){
    if(_lastExeActionReq.exeAction.token){
      _lastExeActionReq.exeAction.tokenFailed=1
    }
    setTimeout(function(){
      chrome.tabs.sendMessage(_ctrlTabId, _lastExeActionReq);
    },100)
  }
  if(_loadPageInfo){
    chrome.tabs.sendMessage(_masterTabId, _loadPageInfo)
    _loadPageInfo=0
  }
}

chrome.tabs.onRemoved.addListener(function(_tab, info) {
  //_console("background: remove tab")
  //clear data when master tab close
  if(_masterTabId==_tab){
    //_console("background: remove master")
    cleanMaster()
  //clear client info
  }else if(_ctrlTabId==_tab){
    //_console("background: remove ctrl")
    _ctrlTabId=0;
    chrome.tabs.sendMessage(_masterTabId, {tw:0,tab:"master"});
  }else{
    delete _frameIds[_tab]
    return
  }
  
  _frameIds={}
});

chrome.tabs.onCreated.addListener(function(_tab, info) {
  //_console("background add tab")
  //only register the poping up client win
  if(_doingPopCtrl){
    //_console("background add ctrl tab")
    if(_ctrlTabId && _ctrlTabId!=_tab.id){
      chrome.tabs.sendMessage(_ctrlTabId, {close:1})
    }
    _ctrlTabId=_tab.id;
    _frameIds={};
    //to tell master the current client tab id
    chrome.tabs.sendMessage(_masterTabId, {tw:_ctrlTabId,tab:"master"});
  }
});

var _console=function(msg,o){
  console.log(msg)
  if(o){
    console.log(o)
  }
}

chrome.runtime.onUpdateAvailable.addListener(function(details) {
  console.log("updating to version " + details.version);

  chrome.runtime.reload();
});

chrome.runtime.requestUpdateCheck(function(s) {
  if (s == "update_available") {
    console.log("update pending...");
  } else if (s == "no_update") {
    console.log("no update found");
  } else if (s == "throttled") {
    console.log("Oops, I'm asking too frequently - I need to back off.");
  }
});
chrome.webRequest.onBeforeRequest.addListener(function(a,b){
  if(a.tabId==_ctrlTabId&&_ctrlTabId){
    if(a.type=="main_frame"){
      _list={}
      _responseList={}
      //console.clear()
    }
    funMap.postRequest(a,"BZ","addReq")
  }
},{urls: ["<all_urls>"]})


chrome.webRequest.onBeforeRedirect.addListener(function(a,b){
  if(a.tabId==_ctrlTabId&&_ctrlTabId){
    funMap.postRequest(a,"BZ","addRep")
  }
},{urls: ["<all_urls>"]})

chrome.webRequest.onCompleted.addListener(function(v){
  if(v.tabId!=_ctrlTabId){
    return
  }
  funMap.postRequest(v,"BZ","addRep")
  
  if(_masterTabId&&v.tabId==_masterTabId&&v.frameId==0&&_masterFrameId){
    cleanMaster()
  }
  if((v.tabId==_ctrlTabId||v.tabId==-1)&&_masterTabId){
    if(!v.url.includes("bzInsert.css")&&!v.url.includes("insert.icons.css")){
      chrome.tabs.sendMessage(_masterTabId, {twUpdate:1,tab:"master"});
    }
    var r={ctrlInfo:1,url:v.url,from:"complete"}
    if(v.statusCode>=400){
      r.failed=1;
      r.code=v.statusCode
    }
    if(v.type=="main_frame"||v.tabId==-1||(v.type=="sub_frame"&&v.frameId==_topFrameId)){
      if(_isDownloading(v.responseHeaders)){
        r.download=1
      }else{
        r.ready=1;//mainPage
        _lastErrPage=0
        if(_loadPageInfo){
          chrome.tabs.sendMessage(_masterTabId, _loadPageInfo);
        }
        setTimeout(function(){
          if(_loadPageInfo){
            chrome.tabs.sendMessage(_masterTabId, _loadPageInfo);
          }
        },1000)
        r.tab="master"
        r.type=v.type
        _loadPageInfo=r;
        return
      }
    }else if(v.type=="other"){
      /*****************************
      * NOT SURE, NEED CHECK AGAIN!!!
      *****************************/
      r.download=1
    }else if(r.failed){
      r.extraFile=1;
      r.initUrl=v.initiator
    }else{
      return;
    }
    r.tab="master"
    chrome.tabs.sendMessage(_masterTabId, r)
  }
},{urls: ["<all_urls>"]},["responseHeaders"]);

function _isDownloading(rs){
  for(var i=0;rs && i<rs.length;i++){
    var r=rs[i];
    if(r.name=="Content-Disposition" && (r.value.includes("attachment")||r.value.includes("filename"))){
      return 1
    }else if((r.name||"").toLowerCase()=="content-type" && (r.value.includes("application")||r.value.includes("stream"))){
      return 1
    }
  }
}
chrome.webRequest.onErrorOccurred.addListener(function(v){
  if(v.tabId==_ctrlTabId||(_masterFrameId&&!_ctrlTabId)){
    var r={ctrlInfo:1,url:v.url,error:v.error};
    funMap.postRequest(v,"BZ","addRep")
    
    if(v.type=="main_frame"||(v.type=="sub_frame"&&((_masterFrameId&&!_ctrlTabId)||v.frameId==_topFrameId))){
      if(_isDownloading(v.responseHeaders)){
        r.download=1
      }else{
        r.ready=1
      }
      if(_lastErrPage && _lastErrPage.url==r.url && Date.now()-_lastErrPage.time<1000){
        _lastErrPage.time=Date.now()
        return;
      }
      _lastErrPage={url:r.url,time:Date.now(),type:v.type}
      console.log(_lastErrPage)
    }else if(v.type=="other"){
      r.download=1
    }else{
      r.error=0
      r.extraFile=1;
      r.initUrl=v.initiator
    }
    r.tab="master"
    chrome.tabs.sendMessage(_masterTabId, r)
  }
},{urls: ["<all_urls>"]});
function cleanMaster(){
  var tabId=_ctrlTabId
  if(tabId!=_masterTabId){
    _setCodeToContent("window.close();",_topFrameId,tabId);
  }
  _status=""
  _masterTabId=0;
  _masterFrameId=0;
  _shareData={}
  ignoreReqs=0
  _newStatus=_status=_topFrameId=0
  _ctrlTabId=0;
  _uncodeFrames=[]
}

chrome.webRequest.onActionIgnored.addListener(function(v){
  if(v.tabId!=_ctrlTabId){
    return
  }
  funMap.postRequest(v,"BZ","addRep")
})


